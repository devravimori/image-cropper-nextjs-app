
import type { NextPage } from 'next'
import Head from 'next/head'
import Img from 'next/image'
import { useCallback, useRef, useState } from 'react'
import Cropper, { Area } from 'react-easy-crop';
import Modal from '../components/Modal'

type crop = {
  x: number;
  y: number;
  width:number;
  height:number;
}

interface cropAndOriginalImage{
  crop: string;
  original: HTMLImageElement;
}

const Home: NextPage = () => {

  const imageRef = useRef<HTMLInputElement>(null)
  const [imageSrc, setImageSrc] = useState<string | null>('')
  const [isLoading, setLoading] = useState<boolean>(false)
  const [crop, setCrop] = useState<crop>({ x: 0, y: 0, width: 500, height: 500 })
  const [cropFinal, setCropFinal] = useState<crop>({ x: 0, y: 0, width: 0, height: 0 })
  const [zoom, setZoom] = useState<number>(1.0)
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [imageObj, setImageObj] = useState<cropAndOriginalImage>({} as cropAndOriginalImage);


  const onFileChange = async (event: React.FormEvent<HTMLInputElement>) => {
    if (event.currentTarget.files && event.currentTarget.files.length > 0) {
      setZoom(1.0)
      setCrop({ x: 0, y: 0, width: 500, height: 500 })
      var file = event.currentTarget.files[0];
      var reader = new FileReader();
      reader.onload = function (e: any) {
        setImageSrc(e.target.result)
      }
      reader.readAsDataURL(file);
      event.currentTarget.value = '';
    }
  }

  const hendleZoom = (event: React.FormEvent<HTMLInputElement>) => {
    setZoom(parseFloat(parseFloat(event.currentTarget.value).toFixed(1)))
  }
  const increment = () => {
    setZoom((zoom) => parseFloat((parseFloat(zoom.toFixed(1)) + .1).toFixed(1)))

  }
  const decrement = () => {
    setZoom((zoom) => parseFloat((parseFloat(zoom.toFixed(1)) - .1).toFixed(1)))
  }

  const onCropChange = useCallback((crop: crop) => {
    setCrop(crop)
  }, [])

  const onZoomChange = useCallback((zoom: number) => {
    setZoom(zoom)
  }, [])

  const onCropComplete = useCallback((croppedArea: Area, croppedAreaPixels: Area) => {
    setCropFinal(croppedAreaPixels)
  }, [])

  const getCroppedImg = async () => {
    setLoading(true)
    let { crop, original }: cropAndOriginalImage = await new Promise(async (resolve) => {

      const canvas: HTMLCanvasElement = document.createElement("canvas");

      canvas.width = cropFinal.width;
      canvas.height = cropFinal.height;
      
      const ctx: CanvasRenderingContext2D | null = canvas.getContext("2d");

      var img: HTMLImageElement = document.createElement("img");

      img.src = imageSrc || '';

      // New lines to be added
      const pixelRatio = window.devicePixelRatio;
      canvas.width = cropFinal.width * pixelRatio;
      canvas.height = cropFinal.height * pixelRatio;
      ctx?.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
      // ctx?.imageSmoothingQuality && ctx.imageSmoothingQuality = "high";
      ctx?.drawImage(
        img,
        cropFinal.x,
        cropFinal.y,
        cropFinal.width,
        cropFinal.height,
        0,
        0,
        cropFinal.width,
        cropFinal.height
      );

      let canvasData: string = await new Promise((resolve) => {
        canvas.toBlob((file: any) => {
          resolve(URL.createObjectURL(file))
        }, 'image/jpeg')
      })

      resolve({crop: canvasData, original: img })
    })
    setImageObj({ original, crop })
    setIsModalOpen(true);
    setLoading(false)
  }

  const closeModal = useCallback(() => {
    setIsModalOpen(false);
  }, [])

  const onCencel = () => {
    setImageSrc(null)
    setZoom(1.0)
    setCrop({ x: 0, y: 0, width: 500, height: 500 })
  }
  return (
    <div>
      <Head>
        <title>Profile edit module</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className='bg-gray-500'>
        <Modal show={isModalOpen} image={imageObj} closeModal={closeModal} />
        <div className="container mx-auto">
          <div className="flex flex-col justify-center items-center h-screen px-3 lg:px-0">
            <div className="bg-white rounded-md w-full md:w-80 lg:w-[375px] shadow px-6 lg:px-8 py-6 text-center">
              <h1 className='font-semibold mb-2'>Zdjęcie profilowe</h1>
              <p className='mb-3'>Dodaj lub zmień obecne zdjęcie profilowe</p>
              <button onClick={() => imageRef.current?.click()} className='border border-gray-700 rounded-md px-4 py-1.5 text-gray-700 hover:bg-gray-700 hover:text-white transition-colors duration-75'>Dodaj zdjęcie</button>
              <input ref={imageRef} onChange={onFileChange} className='hidden' type="file" />
              <div className='py-3'>
                <div className='relative w-full aspect-square'>

                  {imageSrc ?
                    (<>
                      <span className='absolute top-9 left-1/2 -translate-x-1/2 z-50 bg-black/50 flex items-center justify-between px-3 py-1.5 rounded-md space-x-2 w-[200px]'>
                        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M17.8423 9.42408V7.3192C17.8423 6.76095 17.6205 6.22557 17.2257 5.83083C16.8309 5.43609 16.2954 5.21432 15.7371 5.21432H7.31616C6.75782 5.21432 6.22235 5.43609 5.82754 5.83083C5.43274 6.22557 5.21094 6.76095 5.21094 7.3192V15.7387C5.21094 16.297 5.43274 16.8323 5.82754 17.2271C6.22235 17.6218 6.75782 17.8436 7.31616 17.8436H9.42139" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M11.5254 11.528L20.9989 14.6854L16.7885 16.7902L14.6832 21L11.5254 11.528Z" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M1 1V1.01044" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M5.21114 1V1.01044" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M9.41992 1V1.01044" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M13.6309 1V1.01044" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M1 5.21432V5.22476" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M1 9.4209V9.43134" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M1 13.6275V13.6379" stroke="white" strokeWidth="1.2" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                        <div className='text-white'>
                          Przeciągaj i dopasuj
                        </div>
                      </span>
                      <div className="absolute top-0 left-0 right-0 bottom-0">
                        <Cropper
                          image={imageSrc}
                          crop={crop}
                          rotation={0}
                          zoom={zoom}
                          aspect={4 / 4}
                          cropShape="round"
                          showGrid={false}
                          onCropChange={onCropChange}
                          onCropComplete={onCropComplete}
                          onZoomChange={onZoomChange}
                        />
                      </div>
                    </>
                    ) : (<Img src="/images/profile-placeholder.webp" layout="responsive" width={20} height={20} />)}
                </div>
              </div>
              {imageSrc && (<>
                <div className='flex items-center space-x-2' id='image'>
                  <button onClick={decrement} className='px-1 text-gray-600 disabled:text-gray-400' disabled={zoom <= 1}>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M18 12H6" />
                    </svg>
                  </button>

                  <input onChange={hendleZoom} className='w-full' type="range" min={1} max={3} step={0.1} value={zoom} />

                  <button onClick={increment} className='px-1 text-gray-600 disabled:text-gray-400' disabled={zoom >= 3}>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v12m6-6H6" />
                    </svg>
                  </button>
                </div>
                <div className='space-x-3 mt-4 flex justify-center items-center'>
                  <button onClick={onCencel} className='border border-gray-700 rounded-md px-4 py-1.5 text-gray-700 hover:bg-gray-700 hover:text-white transition-colors duration-75'>Anuluj</button>
                  <button onClick={getCroppedImg} disabled={cropFinal.width <= 0 && cropFinal.height <= 0} className='border border-orange-600 bg-orange-600 rounded-md px-4 py-1.5 text-white hover:bg-orange-700 transition-colors duration-75 inline-flex items-center space-x-2'>
                    <svg xmlns="http://www.w3.org/2000/svg" className={`animate-spin ${isLoading ? 'inline-block' : 'hidden'}`} width="20" height="20" viewBox="0 0 24 24" strokeWidth="2" stroke="currentColor" fill="none" strokeLinecap="round" strokeLinejoin="round">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                      <path d="M12 3a9 9 0 1 0 9 9"></path>
                    </svg>
                    <span>Zapisz zmiany</span>
                  </button>
                </div>
              </>)}
            </div>
            <div className='mt-3'>
              <p className='text-gray-100'>Developed with &#x2764; by <a href="https://optimumitapps.com" target='_blank' className='underline underline-offset-2'>Optimumitapps</a>.</p>
            </div>
          </div>
        </div >
      </main >
    </div >
  )
}

export default Home
